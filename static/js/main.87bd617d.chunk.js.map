{"version":3,"sources":["components/profile/Profil Sosmed Alfan.png","components/icons/044-instagram.svg","components/icons/019-dribbble.svg","components/icons/032-github.svg","components/icons/096-twitter.svg","components/icons/007-behance.svg","components/navigation/MenuItems.js","components/navigation/Nav.js","components/profile/Profile.js","components/homepage/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MenuItems","title","icon","link","cName","Nav","useState","flag","setFlag","className","onClick","prev","map","item","href","Profile","src","photo","alt","instagram","twitter","dribbble","behance","github","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,iD,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,6NCA9BC,G,MAAY,CACvB,CACEC,MAAO,OACPC,KAAM,OACNC,KAAM,IACNC,MAAO,aAET,CACEH,MAAO,YACPC,KAAM,cACNC,KAAM,IACNC,MAAO,aAET,CACEH,MAAO,QACPC,KAAM,SACNC,KAAM,IACNC,MAAO,aAET,CACEH,MAAO,UACPC,KAAM,OACNC,KAAM,IACNC,MAAO,eCkBIC,EArCH,WAAO,IAAD,EACQC,oBAAS,GADjB,mBACTC,EADS,KACHC,EADG,KAOhB,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,WACb,wBAAIA,UAAU,QAAd,UACS,oCAET,4BAAQC,QAXD,WACbF,GAAQ,SAACG,GAAD,OAAWA,MAUYF,UAAU,aACjC,0BAAMA,UAAU,uBACbF,EAAO,QAAU,WAK1B,yBAAKE,UAAS,uBAAkBF,EAAO,YAAc,KACnD,wBAAIE,UAAU,QACXT,EAAUY,KAAI,SAACC,GAAD,OACb,4BACE,uBAAGC,KAAMD,EAAKV,KAAMM,UAAWI,EAAKT,OAClC,0BAAMK,UAAU,wBAAwBI,EAAKX,MAC5CW,EAAKZ,e,8GCMPc,EA5BC,kBACd,yBAAKN,UAAU,mBACb,yBAAKA,UAAU,WAAWO,IAAKC,IAAOC,IAAI,KAC1C,uBAAGT,UAAU,eACX,2CADF,4WAQA,uBAAGA,UAAU,SAAb,+HAIA,yBAAKA,UAAU,UACb,uBAAGA,UAAU,UAAb,iBACA,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,cAAcO,IAAKG,IAAWD,IAAI,KACjD,yBAAKT,UAAU,cAAcO,IAAKI,IAASF,IAAI,KAC/C,yBAAKT,UAAU,cAAcO,IAAKK,IAAUH,IAAI,KAChD,yBAAKT,UAAU,cAAcO,IAAKM,IAASJ,IAAI,KAC/C,yBAAKT,UAAU,cAAcO,IAAKO,IAAQL,IAAI,SCrBvCM,EANF,kBACX,6BAASf,UAAU,QACjB,kBAAC,EAAD,QCMWgB,EAPH,kBACV,yBAAKhB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIgBiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.87bd617d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Profil Sosmed Alfan.d7a6753e.png\";","module.exports = __webpack_public_path__ + \"static/media/044-instagram.dca29619.svg\";","module.exports = __webpack_public_path__ + \"static/media/019-dribbble.e8e32296.svg\";","module.exports = __webpack_public_path__ + \"static/media/032-github.192a6620.svg\";","module.exports = __webpack_public_path__ + \"static/media/096-twitter.1daf9a0e.svg\";","module.exports = __webpack_public_path__ + \"static/media/007-behance.7794704d.svg\";","export const MenuItems = [\n  {\n    title: \"Home\",\n    icon: \"home\",\n    link: \"#\",\n    cName: \"menu-item\",\n  },\n  {\n    title: \"Portfolio\",\n    icon: \"description\",\n    link: \"#\",\n    cName: \"menu-item\",\n  },\n  {\n    title: \"About\",\n    icon: \"person\",\n    link: \"#\",\n    cName: \"menu-item\",\n  },\n  {\n    title: \"Hire me\",\n    icon: \"mail\",\n    link: \"#\",\n    cName: \"menu-item\",\n  },\n];\n","import React, { useState } from \"react\";\nimport \"./Nav.css\";\nimport { MenuItems } from \"./MenuItems\";\n\nconst Nav = () => {\n  const [flag, setFlag] = useState(false);\n\n  const toggle = () => {\n    setFlag((prev) => !prev);\n  };\n\n  return (\n    <nav className=\"nav\">\n      <div className=\"container\">\n        <div className=\"wrapper\">\n          <h1 className=\"logo\">\n            alfanme<span>.</span>\n          </h1>\n          <button onClick={toggle} className=\"hamburger\">\n            <span className=\"material-icons bars\">\n              {flag ? \"close\" : \"menu\"}\n            </span>\n          </button>\n        </div>\n      </div>\n      <div className={`menu-wrapper ${flag ? \"show-menu\" : \"\"}`}>\n        <ul className=\"menu\">\n          {MenuItems.map((item) => (\n            <li>\n              <a href={item.link} className={item.cName}>\n                <span className=\"material-icons space\">{item.icon}</span>\n                {item.title}\n              </a>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport \"./Profile.css\";\nimport photo from \"./Profil Sosmed Alfan.png\";\nimport instagram from \"../icons/044-instagram.svg\";\nimport dribbble from \"../icons/019-dribbble.svg\";\nimport github from \"../icons/032-github.svg\";\nimport twitter from \"../icons/096-twitter.svg\";\nimport behance from \"../icons/007-behance.svg\";\n\nconst Profile = () => (\n  <div className=\"profile-wrapper\">\n    <img className=\"my-photo\" src={photo} alt=\"\" />\n    <p className=\"description\">\n      <span>I'm Alfan</span> — a telecommunication eng. student, designer,\n      entrepreneur, and frontend developer based in Indonesia. I've had over 4\n      years experience working on logo and branding design with a lot of\n      different clients, ranging from small local business to startups. From a\n      year back, I found out my passion is leaning towards UI/UX design and\n      frontend web development.\n    </p>\n    <p className=\"quote\">\n      \"There's no such a genius or stupid, the thing is genius has more time\n      figuring out how things work.\" — Self reminder\n    </p>\n    <div className=\"social\">\n      <p className=\"follow\">Follow me on:</p>\n      <div className=\"icons-wrapper\">\n        <img className=\"social-icon\" src={instagram} alt=\"\" />\n        <img className=\"social-icon\" src={twitter} alt=\"\" />\n        <img className=\"social-icon\" src={dribbble} alt=\"\" />\n        <img className=\"social-icon\" src={behance} alt=\"\" />\n        <img className=\"social-icon\" src={github} alt=\"\" />\n      </div>\n    </div>\n  </div>\n);\n\nexport default Profile;\n","import React from \"react\";\nimport \"./Home.css\";\nimport Profile from \"../profile/Profile\";\n\nconst Home = () => (\n  <section className=\"Home\">\n    <Profile />\n  </section>\n);\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\nimport Nav from \"./components/navigation/Nav\";\nimport Home from \"./components/homepage/Home\";\n\nconst App = () => (\n  <div className=\"App\">\n    <Nav />\n    <Home />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}